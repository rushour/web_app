{
  "name": "lyric-node",
  "description": "Linear regression library for use in Node.js applications. Based on Lyric javascript library provided by Flurry (http://github.com/flurry)",
  "version": "0.1.0",
  "engines": {
    "node": ">=0.6.13"
  },
  "author": {
    "name": "Sean Byrnes",
    "email": "sean@fogstack.com"
  },
  "keywords": [
    "regression",
    "learning",
    "matrix"
  ],
  "homepage": "https://github.com/sbyrnes/Lyric",
  "bugs": {
    "url": "https://github.com/sbyrnes/Lyric/issues"
  },
  "main": "./lyric.js",
  "maintainers": [
    {
      "name": "sbyrnes",
      "email": "sean@fogstack.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/sbyrnes/Lyric"
  },
  "dependencies": {
    "sylvester": ">=0.0.21"
  },
  "devDependencies": {
    "expresso": ">=0.9.2"
  },
  "optionalDependencies": {},
  "readme": "Lyric-Node\n=====\n\nLinear Regression library for use in Node.js applications to model and predict data series.\nBased on Lyric javascript library provided by Flurry (http://github.com/flurry)\n\nDescription\n=====\n\nLyric can help you analyze any set of x,y series data by building a model that can be used to:\n 1. Create trendlines on charts\n 2. Predict future values based on an existing set of data\n\nTypical applications would include charting libraries and machine learning applications. \nYou can learn more about Linear Regression and its applications on Wikipedia: http://en.wikipedia.org/wiki/Linear_regression\n\nLyric depends on the great Javascript Matrix library Sylvester by James Coglan available here: \nhttps://github.com/jcoglan/sylvester and turned into an npm module by Chris Umbell & Rob Ellis:\nhttps://github.com/NaturalNode/node-sylvester\n\nInstallation\n=====\n    npm install lyric-node\n\nUsage\n=====\t\nFirst, make sure your data is represented in the form of a 2xN Array comprised of elements with an 'x' and 'y' value. The x value should be the explanatory and the y the dependent variables.\n<!-- language: lang-js -->\n\tvar Lyric = require('lyric-node');\n\t\n\tvar input = new Array();\n\tinput['x'] = new Array();\tinput['y'] = new Array();\n\tinput['x'][0] = 1;\t\tinput['y'][0] = 0.5;\n\tinput['x'][1] = 2;\t\tinput['y'][1] = 1.6;\t\n\tinput['x'][2] = 3;\t\tinput['y'][2] = 4.5;\n\tinput['x'][3] = 4;\t\tinput['y'][3] = 7.6;\n\tinput['x'][4] = 5;\t\tinput['y'][4] = 10.1;\n\t\nThen you need to have Lyric build the model for you from your data:\n<!-- language: lang-js -->\n\tvar model = Lyric.buildModel(input);\n\nNow that you have your model, you will likely want to apply it to a set of inputs. The newInput should be a 1xN array containing only the explanatory variable values you would like to calculate the dependent values. This will result in a new 2xN array which will include the resulting series. \n<!-- language: lang-js -->\n\tvar data = Lyric.applyModel(model, estimationInput);\n\nThe following is a complete example which, given some values for the explanatory values 1 through 5, estimates the values of 6 through 8:\n<!-- language: lang-js -->\n\tvar Lyric = require('lyric-node');\n\t\n\tvar input = new Array();\n\tinput['x'] = new Array();\tinput['y'] = new Array();\n\tinput['x'][0] = 1;\t\tinput['y'][0] = 0.5;\n\tinput['x'][1] = 2;\t\tinput['y'][1] = 1.6;\t\n\tinput['x'][2] = 3;\t\tinput['y'][2] = 4.5;\n\tinput['x'][3] = 4;\t\tinput['y'][3] = 7.6;\n\tinput['x'][4] = 5;\t\tinput['y'][4] = 10.1;\n\t\n\tvar estimationInput = new Array();\n\testimationInput['x'] = new Array();\t\n\testimationInput['x'][0] = 6;\n\testimationInput['x'][1] = 7;\n\testimationInput['x'][2] = 8;\n\n\tvar estimateData = Lyric.applyModel(estimationInput, Lyric.buildModel(data));\n\t\n\t// estimateData = [ \n\t//\t\t    {\"x\":6,\"y\":13.919999999999881},\n\t//\t\t    {\"x\":7,\"y\":17.93999999999984},\n\t//\t\t    {\"x\":8,\"y\":22.388571428571225}]\n\t\nBy default Lyric will attempt to use a 2nd degree polynomial to model the data. If you would like to use a higher order polynomial for the model, just pass in the degree you would like to use in the buildModel() and applyModel() functions. \nFor example, to model using a 4-th degree polynomial you would modify the above example as follows:\n<!-- language: lang-js -->\n\tvar estimateData = Lyric.applyModel(estimationInput, Lyric.buildModel(data, 4), 4);\n\t\nEstimation Error\n=====\t\nAs with any model, it is important to know how accurate your model is on known data. Typically you would have a set of known values that you use to build the model (the training set) and a set of known values you use to test (the test set). \nThere is a convenience function provided to help you determine the Mean Squared Error (MSE) which is the sum of the squares of the differences between the known values and the estimated values from the model. You call it the same way that you call applyModel()\n\n<!-- language: lang-js -->\n\tvar error = Lyric.computeError(input, Lyric.buildModel(input));\n\t\n\t// error is a float value representing the MSE\n\t\nAcceptable MSE will vary by application so it is up to you to determine whether the value is acceptable. \n\nIf you want to reduce the MSE you have two options:\n * Increase the size of the training set.\n * Change the polynomial degree used to fit the data.\n\t\nTimeseries\n=====\nFor timeseries data using regular intervals, it is typically more efficient to use the ordinality as the explanatory value than the timestamp. For example, given the following data series:\n<!-- language: lang-js -->\n\tvar input = new Array();\n\tinput['x'] = new Array();\t\tinput['y'] = new Array();\n\tinput['x'][0] = '2012-03-01';\t\tinput['y'][0] = 0.5;\n\tinput['x'][1] = '2012-03-02';\t\tinput['y'][1] = 1.6;\t\n\tinput['x'][2] = '2012-03-03';\t\tinput['y'][2] = 4.5;\n\tinput['x'][3] = '2012-03-04';\t\tinput['y'][3] = 7.6;\n\tinput['x'][4] = '2012-03-05';\t\tinput['y'][4] = 10.1;\n\t\nYou can turn the dates in the input[0] series into timestamps for use in modelling, but since each data point represents a single day the easier and simpler calculation is to ignore the particular days and use the ordinality. Lyric provides a convenience function for manipulating this kind of data called ordinalize() which is used as shown below:\n<!-- language: lang-js -->\n\tvar ordinalInput = Lyric.ordinalize(input);\n\t\nThe resulting ordinalInput will be equivalent to having created the following input:\n<!-- language: lang-js -->\n\tvar input = new Array();\n\tinput['label'] = new Array(); \t\t\tinput['x'] = new Array();\tinput['y'] = new Array();\n\tinput['label'][0] = '2012-03-01';\t\tinput['x'][0] = 1;\t\tinput['y'][0] = 0.5;\n\tinput['label'][1] = '2012-03-01';\t\tinput['x'][1] = 2;\t\tinput['y'][1] = 1.6;\t\n\tinput['label'][2] = '2012-03-01';\t\tinput['x'][2] = 3;\t\tinput['y'][2] = 4.5;\n\tinput['label'][3] = '2012-03-01';\t\tinput['x'][3] = 4;\t\tinput['y'][3] = 7.6;\n\tinput['label'][4] = '2012-03-01';\t\tinput['x'][4] = 5;\t\tinput['y'][4] = 10.1;\n\t\nLyric can then use the ordinal x values to more efficiently compute the regression. Note that if you do use this, you need to ordinalize both the input provided to build the model AND the input the model is applied.\n\t\nImplementation\n=====\nLyric uses the Normal Equation (closed form) to build the linear model. You can read more about the Normal Equation here:\nhttp://mathworld.wolfram.com/NormalEquation.html\n\nThis does introduce the limitation that Lyric will not work on input data that produces a non-invertible matrix when multiplied by its transpose. \n\nA full breakdown on Lyric is available here: http://tech.flurry.com/lyric-linear-regression-in-pure-javascript\n\nLicense \n=====\nCopyright 2012 Flurry, Inc. (http://flurry.com) - modifications 2013 Sean Byrnes\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "readmeFilename": "README.md",
  "_id": "lyric-node@0.1.0",
  "dist": {
    "shasum": "f8c15b8f8f3dc7d9d331c790ff0494ad3e7053f0",
    "tarball": "http://registry.npmjs.org/lyric-node/-/lyric-node-0.1.0.tgz"
  },
  "_from": "lyric-node@>=0.1.0 <0.2.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "sbyrnes",
    "email": "sean@fogstack.com"
  },
  "directories": {},
  "_shasum": "f8c15b8f8f3dc7d9d331c790ff0494ad3e7053f0",
  "_resolved": "https://registry.npmjs.org/lyric-node/-/lyric-node-0.1.0.tgz"
}
